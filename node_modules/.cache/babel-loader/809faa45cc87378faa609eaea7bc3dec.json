{"ast":null,"code":"import { baseUrl } from '../baseUrl';\nimport * as ActionTypes from './ActionTypes';\nexport var postUser = function postUser(firstName, lastName, age, email) {\n  return function (dispatch) {\n    var newUser = {\n      name: firstName,\n      lastName: lastName,\n      age: age,\n      email: email\n    };\n    console.log(\"newUser\");\n    console.log(newUser);\n    return fetch(baseUrl + 'users', {\n      method: 'POST',\n      body: JSON.stringify(newUser),\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: 'same-origin'\n    }).then(function (response) {\n      if (response.ok) {\n        return response;\n      } else {\n        var error = new Error(\"Error \" + response.status + \": \" + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    }, function (error) {\n      var errmess = new Error(error.message);\n      throw errmess;\n    }).then(function (response) {\n      return response.json();\n    }).then(function (user) {\n      return dispatch(addUser(user));\n    }).catch(function (error) {\n      console.log('Post User', error.message);\n      alert('Your user might not be posted\\nError: ' + error.message);\n    });\n  };\n};\nexport var modifyUser = function modifyUser(id, firstName, lastName, age, email) {\n  return function (dispatch) {\n    var existingUser = {\n      id: id,\n      name: firstName,\n      lastName: lastName,\n      age: age,\n      email: email\n    };\n    return fetch(baseUrl + 'users:' + existingUser.id, {\n      method: 'PUT',\n      body: JSON.stringify(existingUser),\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: 'same-origin'\n    }).then(function (response) {\n      if (response.ok) {\n        return response;\n      } else {\n        var error = new Error(\"Error \" + response.status + \": \" + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    }, function (error) {\n      var errmess = new Error(error.message);\n      throw errmess;\n    }).then(function (response) {\n      return response.json();\n    }).then(fetchUsers()).catch(function (error) {\n      console.log('Post User', error.message);\n      alert('Your user might not be posted\\nError: ' + error.message);\n    });\n  };\n};\nexport var addUsers = function addUsers(users) {\n  return {\n    type: ActionTypes.ADD_USERS,\n    payload: users\n  };\n};\nexport var usersFailed = function usersFailed(errmess) {\n  return {\n    type: ActionTypes.USERS_FAILED,\n    payload: errmess\n  };\n};\nexport var fetchUsers = function fetchUsers() {\n  return function (dispatch) {\n    dispatch(usersLoading(true));\n    return fetch(baseUrl + 'users').then(function (response) {\n      if (response.ok) {\n        return response;\n      } else {\n        var error = new Error(\"Error \" + response.status + \": \" + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    }, function (error) {\n      var errmess = new Error(error.message);\n      throw errmess;\n    }).then(function (response) {\n      return response.json();\n    }).then(function (users) {\n      return dispatch(addUsers(users));\n    }).catch(function (error) {\n      return dispatch(usersFailed(error.message));\n    });\n  };\n};\nexport var usersLoading = function usersLoading() {\n  return {\n    type: ActionTypes.USERS_LOADING\n  };\n};\nexport var addUser = function addUser(user) {\n  return {\n    type: ActionTypes.ADD_USER,\n    payload: user\n  };\n};","map":{"version":3,"sources":["D:\\Users\\avilchez\\aprendizaje\\PruebaReact\\Prueba_React_codigo\\front\\src\\redux\\ActionCreators.js"],"names":["baseUrl","ActionTypes","postUser","firstName","lastName","age","email","dispatch","newUser","name","console","log","fetch","method","body","JSON","stringify","headers","credentials","then","response","ok","error","Error","status","statusText","errmess","message","json","user","addUser","catch","alert","modifyUser","id","existingUser","fetchUsers","addUsers","users","type","ADD_USERS","payload","usersFailed","USERS_FAILED","usersLoading","USERS_LOADING","ADD_USER"],"mappings":"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","sourcesContent":["import {baseUrl} from '../baseUrl';\r\nimport * as ActionTypes from './ActionTypes';\r\n\r\nexport const postUser = (firstName, lastName, age, email) => (dispatch) => {\r\n\t\r\n\tconst newUser = {\r\n\t\tname: firstName,\r\n\t\tlastName: lastName,\r\n\t\tage: age,\r\n\t\temail: email\r\n\t}\r\n\tconsole.log(\"newUser\");\r\n\tconsole.log(newUser);\r\n\treturn fetch(baseUrl + 'users', {\r\n\t\tmethod:'POST',\r\n\t\tbody: JSON.stringify(newUser),\r\n\t\theaders:{\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t},\r\n\t\tcredentials: 'same-origin'\r\n\t})\r\n\t.then(response => {\r\n\t\tif(response.ok) {\r\n\t\t\treturn response;\r\n\t\t}else{\r\n\t\t\tvar error = new Error(\"Error \" + response.status+ \": \" + response.statusText);\r\n\t\t\terror.response = response;\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t},\r\n\terror => {\r\n\t\tvar errmess = new Error(error.message);\r\n\t\tthrow errmess\r\n\t})\r\n\t.then(response => response.json())\r\n\t.then( user => dispatch(addUser(user)))\r\n\t.catch(error => {\r\n\t\tconsole.log('Post User',error.message);\r\n\t\talert('Your user might not be posted\\nError: ' + error.message)\r\n\t});\r\n\t\r\n};\r\n\r\nexport const modifyUser = (id, firstName, lastName, age, email) => (dispatch) => {\r\n\t\r\n\tconst existingUser = {\r\n\t\tid: id,\r\n\t\tname: firstName,\r\n\t\tlastName: lastName,\r\n\t\tage: age,\r\n\t\temail: email\r\n\t}\r\n\t\r\n\treturn fetch(baseUrl + 'users:'+existingUser.id, {\r\n\t\tmethod:'PUT',\r\n\t\tbody: JSON.stringify(existingUser),\r\n\t\theaders:{\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t},\r\n\t\tcredentials: 'same-origin'\r\n\t})\r\n\t.then(response => {\r\n\t\tif(response.ok) {\r\n\t\t\treturn response;\r\n\t\t}else{\r\n\t\t\tvar error = new Error(\"Error \" + response.status+ \": \" + response.statusText);\r\n\t\t\terror.response = response;\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t},\r\n\terror => {\r\n\t\tvar errmess = new Error(error.message);\r\n\t\tthrow errmess\r\n\t})\r\n\t.then(response => response.json())\r\n\t.then( fetchUsers())\r\n\t.catch(error => {\r\n\t\tconsole.log('Post User',error.message);\r\n\t\talert('Your user might not be posted\\nError: ' + error.message)\r\n\t});\r\n\t\r\n};\r\n\r\n\r\n\r\n\r\n\r\nexport const addUsers = (users) => ({\r\n\ttype: ActionTypes.ADD_USERS,\r\n\tpayload: users\r\n});\r\nexport const usersFailed = (errmess) => ({\r\n\ttype: ActionTypes.USERS_FAILED,\r\n\tpayload: errmess\r\n});\r\n\r\nexport const fetchUsers = () => (dispatch) =>{\r\n\tdispatch(usersLoading(true));\r\n\t\r\n\treturn fetch(baseUrl + 'users')\r\n\t.then(response => {\r\n\t\tif(response.ok) {\r\n\t\t\treturn response;\r\n\t\t}else{\r\n\t\t\tvar error = new Error(\"Error \" + response.status+ \": \" + response.statusText);\r\n\t\t\terror.response = response;\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t},\r\n\terror => {\r\n\t\tvar errmess = new Error(error.message);\r\n\t\tthrow errmess\r\n\t})\r\n\t.then(response => response.json())\r\n\t.then(users => dispatch(addUsers(users)))\r\n\t.catch(error => dispatch(usersFailed(error.message)));\r\n\t\r\n};\r\nexport const usersLoading = () => ({\r\n\ttype: ActionTypes.USERS_LOADING\r\n});\r\nexport const addUser = (user) => ({\r\n\ttype:ActionTypes.ADD_USER,\r\n\tpayload:user\r\n})\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}